// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecipientsClient is the client API for Recipients service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecipientsClient interface {
	ListRecipients(ctx context.Context, in *ListRecipientsRequest, opts ...grpc.CallOption) (Recipients_ListRecipientsClient, error)
}

type recipientsClient struct {
	cc grpc.ClientConnInterface
}

func NewRecipientsClient(cc grpc.ClientConnInterface) RecipientsClient {
	return &recipientsClient{cc}
}

func (c *recipientsClient) ListRecipients(ctx context.Context, in *ListRecipientsRequest, opts ...grpc.CallOption) (Recipients_ListRecipientsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Recipients_ServiceDesc.Streams[0], "/Recipients/ListRecipients", opts...)
	if err != nil {
		return nil, err
	}
	x := &recipientsListRecipientsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Recipients_ListRecipientsClient interface {
	Recv() (*ListRecipientsReply, error)
	grpc.ClientStream
}

type recipientsListRecipientsClient struct {
	grpc.ClientStream
}

func (x *recipientsListRecipientsClient) Recv() (*ListRecipientsReply, error) {
	m := new(ListRecipientsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RecipientsServer is the server API for Recipients service.
// All implementations must embed UnimplementedRecipientsServer
// for forward compatibility
type RecipientsServer interface {
	ListRecipients(*ListRecipientsRequest, Recipients_ListRecipientsServer) error
	mustEmbedUnimplementedRecipientsServer()
}

// UnimplementedRecipientsServer must be embedded to have forward compatible implementations.
type UnimplementedRecipientsServer struct {
}

func (UnimplementedRecipientsServer) ListRecipients(*ListRecipientsRequest, Recipients_ListRecipientsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRecipients not implemented")
}
func (UnimplementedRecipientsServer) mustEmbedUnimplementedRecipientsServer() {}

// UnsafeRecipientsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecipientsServer will
// result in compilation errors.
type UnsafeRecipientsServer interface {
	mustEmbedUnimplementedRecipientsServer()
}

func RegisterRecipientsServer(s grpc.ServiceRegistrar, srv RecipientsServer) {
	s.RegisterService(&Recipients_ServiceDesc, srv)
}

func _Recipients_ListRecipients_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRecipientsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecipientsServer).ListRecipients(m, &recipientsListRecipientsServer{stream})
}

type Recipients_ListRecipientsServer interface {
	Send(*ListRecipientsReply) error
	grpc.ServerStream
}

type recipientsListRecipientsServer struct {
	grpc.ServerStream
}

func (x *recipientsListRecipientsServer) Send(m *ListRecipientsReply) error {
	return x.ServerStream.SendMsg(m)
}

// Recipients_ServiceDesc is the grpc.ServiceDesc for Recipients service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recipients_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Recipients",
	HandlerType: (*RecipientsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListRecipients",
			Handler:       _Recipients_ListRecipients_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "recipients.proto",
}
