// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecipientsClient is the client API for Recipients service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecipientsClient interface {
	ListRecipients(ctx context.Context, in *ListRecipientsRequest, opts ...grpc.CallOption) (*ListRecipientsReply, error)
}

type recipientsClient struct {
	cc grpc.ClientConnInterface
}

func NewRecipientsClient(cc grpc.ClientConnInterface) RecipientsClient {
	return &recipientsClient{cc}
}

func (c *recipientsClient) ListRecipients(ctx context.Context, in *ListRecipientsRequest, opts ...grpc.CallOption) (*ListRecipientsReply, error) {
	out := new(ListRecipientsReply)
	err := c.cc.Invoke(ctx, "/Recipients/ListRecipients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecipientsServer is the server API for Recipients service.
// All implementations must embed UnimplementedRecipientsServer
// for forward compatibility
type RecipientsServer interface {
	ListRecipients(context.Context, *ListRecipientsRequest) (*ListRecipientsReply, error)
	mustEmbedUnimplementedRecipientsServer()
}

// UnimplementedRecipientsServer must be embedded to have forward compatible implementations.
type UnimplementedRecipientsServer struct {
}

func (UnimplementedRecipientsServer) ListRecipients(context.Context, *ListRecipientsRequest) (*ListRecipientsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecipients not implemented")
}
func (UnimplementedRecipientsServer) mustEmbedUnimplementedRecipientsServer() {}

// UnsafeRecipientsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecipientsServer will
// result in compilation errors.
type UnsafeRecipientsServer interface {
	mustEmbedUnimplementedRecipientsServer()
}

func RegisterRecipientsServer(s grpc.ServiceRegistrar, srv RecipientsServer) {
	s.RegisterService(&Recipients_ServiceDesc, srv)
}

func _Recipients_ListRecipients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecipientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipientsServer).ListRecipients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Recipients/ListRecipients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipientsServer).ListRecipients(ctx, req.(*ListRecipientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Recipients_ServiceDesc is the grpc.ServiceDesc for Recipients service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recipients_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Recipients",
	HandlerType: (*RecipientsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRecipients",
			Handler:    _Recipients_ListRecipients_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recipients.proto",
}
